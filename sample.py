import numpy as np
from munkres import Munkres, make_cost_matrix

class ExtendedMunkres(Munkres):
    def get_internal_C(self):
        return self.C

    def get_marked_matrix(self):
        return self.marked

# 15x15 profit matrix
profit_matrix = np.array([
    [0, 30, 1, 55, 1, 0, 60, 33, 10, 0, 100, 0, 0, 0, 0],
    [0, 30, 1, 55, 1, 0, 60, 33, 10, 0, 100, 0, 0, 0, 0],
    [0, 30, 1, 55, 1, 0, 60, 33, 10, 0, 100, 0, 0, 0, 0],
    [0, 30, 1, 55, 1, 0, 60, 33, 10, 0, 100, 0, 0, 0, 0],
    [0, 0, 1, 50, 1, 80, 100, 0, 10, 44, 0, 100, 0, 100, 69],
    [0, 0, 1, 55, 1, 90, 70, 33, 10, 100, 0, 100, 0, 0, 89],
    [100, 0, 1, 0, 1, 70, 10, 33, 10, 88, 100, 0, 100, 0, 24],
    [0, 0, 1, 90, 1, 0, 0, 1, 10, 0, 0, 0, 0, 0, 100],
    [0, 90, 1, 60, 1, 0, 0, 0, 10, 99, 0, 0, 0, 0, 0],
    [0, 90, 1, 60, 1, 0, 0, 0, 10, 99, 0, 0, 0, 0, 0],
    [0, 90, 1, 60, 1, 0, 0, 0, 10, 99, 0, 0, 0, 0, 0],
    [0, 90, 1, 60, 1, 0, 0, 0, 10, 99, 0, 0, 0, 0, 0],
    [0, 90, 1, 60, 1, 0, 0, 0, 10, 99, 0, 0, 0, 0, 0],
    [0, 90, 1, 60, 1, 0, 0, 0, 10, 99, 0, 0, 0, 0, 0],
    [0, 90, 1, 60, 1, 0, 0, 0, 10, 99, 0, 0, 0, 0, 0]
])

# Convert profit matrix to cost matrix
cost_matrix = make_cost_matrix(profit_matrix.tolist())

# Create an instance of ExtendedMunkres
munkres = ExtendedMunkres()

# Compute the result
result = munkres.compute(cost_matrix)

# Print the results
print("Result:", result)
print("Internal C Matrix:", munkres.get_internal_C())
print("Marked Matrix:", munkres.get_marked_matrix()) 




Result: [(0, 7), (1, 6), (2, 10), (3, 8), (4, 13), (5, 11), (6, 0), (7, 14), (8, 12), (9, 1), (10, 9), (11, 5), (12, 4), (13, 3), (14, 2)]
Internal C Matrix: 
[[  0,  60,   0,   5,   0,   0,   0,   0,   0,  99,   0,  10,   0,  10,  70], 
 [  0,  60,   0,   5,   0,   0,   0,   0,   0,  99,   0,  10,   0,  10,  70], 
 [  0,  60,   0,   5,   0,   0,   0,   0,   0,  99,   0,  10,   0,  10,  70], 
 [  0,  60,   0,   5,   0,   0,   0,   0,   0,  99,   0,  10,   0,  10,  70], 
 [ 90, 180,  90, 100,  90,  10,  50, 123,  90, 145, 190,   0,  90,   0,  91], 
 [ 90, 180,  90,  95,  90,   0,  80,  90,  90,  89, 190,   0,  90, 100,  71], 
 [  0, 190, 100, 160, 100,  30, 150, 100, 100, 111, 100, 110,   0, 110, 146], 
 [ 30, 120,  30,   0,  30,  30,  90,  62,  30, 129, 130,  40,  30,  40,   0], 
 [  0,   0,   0,   0,   0,   0,  60,  33,   0,   0, 100,  10,   0,  10,  70], 
 [  0,   0,   0,   0,   0,   0,  60,  33,   0,   0, 100,  10,   0,  10,  70], 
 [  0,   0,   0,   0,   0,   0,  60,  33,   0,   0, 100,  10,   0,  10,  70], 
 [  0,   0,   0,   0,   0,   0,  60,  33,   0,   0, 100,  10,   0,  10,  70], 
 [  0,   0,   0,   0,   0,   0,  60,  33,   0,   0, 100,  10,   0,  10,  70], 
 [  0,   0,   0,   0,   0,   0,  60,  33,   0,   0, 100,  10,   0,  10,  70], 
 [  0,   0,   0,   0,   0,   0,  60,  33,   0,   0, 100,  10,   0,  10,  70]]
Marked Matrix: 
[[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], 
[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], 
[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]